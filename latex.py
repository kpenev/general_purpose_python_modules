import re

from os.path import exists

#Intended as a simple callable
#pylint: disable=too-few-public-methods
class NumericLabelMaker:
    r"""
    Class for creating labels for different constraints.

    Attrs:
        referenc_labels(dict):
            Keys are the bibliography keys (i.e. what appears as argument to
            ``\citep`` in the latex file) and values are the corresponding
            reference number that those are cites as in the text (i.e. what gets
            displayed in the PDF).
    """

    def __init__(self, proposal_aux):
        """
        Parse the labels used for each reference in the proposal document.

        Sets the :attr:`reference_labels` attribute.

        Args:
            proposal_aux(str):    The filename of the ``proposal.aux`` file
                generated by latex.

        Returns:
            None
        """

        numerc_citation_rex = re.compile(
            r'\\bibcite\{(?P<key>[^{}]*)\}'
            r'\{\{(?P<value>[0-9]*)\}\{\}\{\{\}\}\{\{\}\}\}'
        )
        self.reference_labels = {}
        assert exists(proposal_aux)
        with open(proposal_aux, 'r', encoding='utf-8') as aux_f:
            for line in aux_f:
                matched = numerc_citation_rex.fullmatch(line.strip())
                if matched:
                    self.reference_labels[matched['key']] = int(
                        matched['value']
                    )


    def __call__(self, bib_keys):
        """Create a label given one or multiple bibliography keys."""

        if isinstance(bib_keys, str):
            bib_keys = [bib_keys]


        return (
            '['
            +
            ','.join([str(self.reference_labels[k]) for k in bib_keys])
            +
            ']'
        )
#pylint: enable=too-few-public-methods
